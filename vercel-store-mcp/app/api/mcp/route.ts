import { z } from 'zod';
import { createMcpHandler } from '@vercel/mcp-adapter';
import { createClient } from '@supabase/supabase-js';

// SupabaseÊé•Á∂öË®≠ÂÆö
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://example.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'dummy-key';
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Vercel APIË®≠ÂÆö
const vercelToken = process.env.VERCEL_TOKEN || 'dummy-token';
const vercelTeamId = process.env.VERCEL_TEAM_ID;
const baseDomain = process.env.BASE_DOMAIN || 'susukino-hostclub-guide.online';

/**
 * Vercel Domains API„Åß„Çµ„Éñ„Éâ„É°„Ç§„É≥„Çí‰ΩúÊàê
 */
async function createSubdomain(storeId: string, projectId: string) {
  try {
    const subdomain = `${storeId}.${baseDomain}`;
    
    console.log(`üåê Creating subdomain: ${subdomain}`);
    
    const response = await fetch(`https://api.vercel.com/v10/projects/${projectId}/domains`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${vercelToken}`,
        'Content-Type': 'application/json',
        ...(vercelTeamId && { 'X-Vercel-Team-Id': vercelTeamId })
      },
      body: JSON.stringify({
        name: subdomain,
      })
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Vercel API error: ${response.status} ${error}`);
    }

    const result = await response.json();
    console.log(`‚úÖ Subdomain created successfully:`, result);
    
    return {
      success: true,
      domain: subdomain,
      data: result
    };
  } catch (error) {
    console.error(`‚ùå Failed to create subdomain:`, error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Supabase„Å´Â∫óËàó„Éá„Éº„Çø„ÇíËøΩÂä†
 */
async function addStoreToSupabase(storeData: {
  name: string;
  store_id: string;
  open_time?: string;
  close_time?: string;
  base_price?: number;
}) {
  try {
    console.log(`üè™ Adding store to Supabase:`, storeData);
    
    const { data, error } = await supabase
      .from('stores')
      .insert([{
        name: storeData.name,
        store_id: storeData.store_id,
        open_time: storeData.open_time || '20:00',
        close_time: storeData.close_time || '23:30',
        base_price: storeData.base_price || 0,
        id_required: 'È°îÔºù‰øùÈô∫Ë®ºÔºã„Ç≠„É£„ÉÉ„Ç∑„É•',
        male_price: 0,
        panel_fee: 120000,
        guarantee_count: 25,
        penalty_fee: 20000,
        unit_price: 1000,
        is_transfer: false,
        hoshos_url: null,
        store_phone: null
      }])
      .select();

    if (error) throw error;
    
    console.log(`‚úÖ Store added to Supabase:`, data);
    return { success: true, data };
  } catch (error) {
    console.error(`‚ùå Failed to add store to Supabase:`, error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Supabase„Å´Ë™çË®º„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
 */
async function createStoreUser(storeId: string, storeName: string) {
  try {
    console.log(`üë§ Creating user for store: ${storeId}`);
    
    const email = `${storeId}@hostclub.local`;
    const password = 'hostclub123';
    
    const { data, error } = await supabase.auth.admin.createUser({
      email,
      password,
      email_confirm: true,
      user_metadata: {
        role: 'customer',
        store_id: storeId,
        store_name: storeName,
        email_verified: true
      }
    });

    if (error) throw error;
    
    console.log(`‚úÖ User created successfully:`, data.user?.id);
    return { success: true, data };
  } catch (error) {
    console.error(`‚ùå Failed to create user:`, error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

const handler = createMcpHandler(
  (server) => {
    // Â∫óËàó‰ΩúÊàê„Å®„Çµ„Éñ„Éâ„É°„Ç§„É≥Ëá™ÂãïÁîüÊàê„ÉÑ„Éº„É´
    server.tool(
      'create_store_with_subdomain',
      'Êñ∞Ë¶èÂ∫óËàó„Çí‰ΩúÊàê„Åó„ÄÅËá™ÂãïÁöÑ„Å´„Çµ„Éñ„Éâ„É°„Ç§„É≥„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åó„Åæ„Åô',
      {
        store_name: z.string().describe('Â∫óËàóÂêç'),
        store_id: z.string().describe('Â∫óËàóIDÔºà„Çµ„Éñ„Éâ„É°„Ç§„É≥„Å´‰ΩøÁî®Ôºâ'),
        open_time: z.string().optional().describe('Âñ∂Ê•≠ÈñãÂßãÊôÇÈñì (HH:MMÂΩ¢Âºè)'),
        close_time: z.string().optional().describe('Âñ∂Ê•≠ÁµÇ‰∫ÜÊôÇÈñì (HH:MMÂΩ¢Âºè)'),
        base_price: z.number().optional().describe('Âü∫Êú¨ÊñôÈáë'),
        vercel_project_id: z.string().describe('Vercel„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID')
      },
      async ({ store_name, store_id, open_time, close_time, base_price, vercel_project_id }) => {
        try {
          console.log(`üöÄ Starting store creation process for: ${store_name} (${store_id})`);
          
          // Áí∞Â¢ÉÂ§âÊï∞„ÅÆÁ¢∫Ë™ç
          if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
            return {
              content: [
                {
                  type: 'text',
                  text: `‚ùå SupabaseÁí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇNEXT_PUBLIC_SUPABASE_URL„Å®SUPABASE_SERVICE_ROLE_KEY„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
                }
              ]
            };
          }
          
          if (!process.env.VERCEL_TOKEN) {
            return {
              content: [
                {
                  type: 'text',
                  text: `‚ùå Vercel API Token„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇVERCEL_TOKEN„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
                }
              ]
            };
          }
          
          // 1. Supabase„Å´Â∫óËàó„Éá„Éº„Çø„ÇíËøΩÂä†
          const storeResult = await addStoreToSupabase({
            name: store_name,
            store_id,
            open_time,
            close_time,
            base_price
          });
          
          if (!storeResult.success) {
            return {
              content: [
                {
                  type: 'text',
                  text: `‚ùå Â∫óËàó„Éá„Éº„Çø„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${storeResult.error}`
                }
              ]
            };
          }
          
          // 2. Ë™çË®º„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
          const userResult = await createStoreUser(store_id, store_name);
          
          // 3. Vercel„Åß„Çµ„Éñ„Éâ„É°„Ç§„É≥„Çí‰ΩúÊàê
          const subdomainResult = await createSubdomain(store_id, vercel_project_id);
          
          if (!subdomainResult.success) {
            return {
              content: [
                {
                  type: 'text',
                  text: `‚ö†Ô∏è Â∫óËàó„ÅØ‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü„Åå„ÄÅ„Çµ„Éñ„Éâ„É°„Ç§„É≥„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${subdomainResult.error}`
                }
              ]
            };
          }
          
          // 4. ÊàêÂäü„É¨„Çπ„Éù„É≥„Çπ
          const responseText = `‚úÖ Â∫óËàó„Äå${store_name}„Äç„ÅåÊ≠£Â∏∏„Å´‰ΩúÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ

üè™ **Â∫óËàóÊÉÖÂ†±**
- Â∫óËàóÂêç: ${store_name}
- Â∫óËàóID: ${store_id}
- Âñ∂Ê•≠ÊôÇÈñì: ${open_time || '20:00'} - ${close_time || '23:30'}

üåê **„Çµ„Éñ„Éâ„É°„Ç§„É≥**
- URL: https://${subdomainResult.domain}
- Êï∞ÂàÜ‰ª•ÂÜÖ„Å´„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åô

üë§ **„É≠„Ç∞„Ç§„É≥ÊÉÖÂ†±**
- „É°„Éº„É´: ${store_id}@hostclub.local
- „Éë„Çπ„ÉØ„Éº„Éâ: hostclub123
${userResult.success ? '- „É¶„Éº„Ç∂„Éº‰ΩúÊàê: ‚úÖ' : `- „É¶„Éº„Ç∂„Éº‰ΩúÊàê: ‚ùå (${userResult.error})`}

üéØ **Ê¨°„ÅÆÊâãÈ†Ü**
1. DNS„ÅÆ‰ºùÊí≠„ÇíÂæÖ„Å§ÔºàÈÄöÂ∏∏5-10ÂàÜÔºâ
2. https://${subdomainResult.domain} „Å´„Ç¢„ÇØ„Çª„Çπ
3. ‰∏äË®ò„ÅÆ„É≠„Ç∞„Ç§„É≥ÊÉÖÂ†±„Åß„ÉÜ„Çπ„Éà`;

          return {
            content: [
              {
                type: 'text',
                text: responseText
              }
            ]
          };
          
        } catch (error) {
          console.error(`‚ùå Unexpected error:`, error);
          return {
            content: [
              {
                type: 'text',
                text: `‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error instanceof Error ? error.message : 'Unknown error'}`
              }
            ]
          };
        }
      }
    );

    // „Çµ„Éñ„Éâ„É°„Ç§„É≥Áä∂Ê≥ÅÁ¢∫Ë™ç„ÉÑ„Éº„É´
    server.tool(
      'check_subdomain_status',
      'ÊåáÂÆö„Åó„Åü„Çµ„Éñ„Éâ„É°„Ç§„É≥„ÅÆÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô',
      {
        store_id: z.string().describe('Â∫óËàóID')
      },
      async ({ store_id }) => {
        try {
          const subdomain = `${store_id}.${baseDomain}`;
          
          // AbortController„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÇíË®≠ÂÆö
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000);
          
          const response = await fetch(`https://${subdomain}`, {
            method: 'HEAD',
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          const status = response.ok ? '‚úÖ „Ç¢„ÇØ„ÉÜ„Ç£„Éñ' : '‚è≥ Ë®≠ÂÆö‰∏≠';
          
          return {
            content: [
              {
                type: 'text',
                text: `üåê „Çµ„Éñ„Éâ„É°„Ç§„É≥Áä∂Ê≥Å: ${subdomain}\n„Çπ„ÉÜ„Éº„Çø„Çπ: ${status}`
              }
            ]
          };
        } catch (error) {
          return {
            content: [
              {
                type: 'text',
                text: `‚è≥ „Çµ„Éñ„Éâ„É°„Ç§„É≥ ${store_id}.${baseDomain} „ÅØË®≠ÂÆö‰∏≠„Åß„Åô`
              }
            ]
          };
        }
      }
    );
  },
  {},
  { basePath: '/api' }
);

export { handler as GET, handler as POST, handler as DELETE }; 